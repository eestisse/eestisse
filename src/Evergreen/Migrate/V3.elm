module Evergreen.Migrate.V3 exposing (..)

{-| This migration file was automatically generated by the lamdera compiler.

It includes:

  - A migration for each of the 6 Lamdera core types that has changed
  - A function named `migrate_ModuleName_TypeName` for each changed/custom type

Expect to see:

  - `Unimplement–µd` values as placeholders wherever I was unable to figure out a clear migration path for you
  - `@NOTICE` comments for things you should know about, i.e. new custom type constructors that won't get any
    value mappings from the old type by default

You can edit this file however you wish! It won't be generated again.

See <https://dashboard.lamdera.app/docs/evergreen> for more info.

-}

import Evergreen.V1.Types
import Evergreen.V3.Types
import Lamdera.Migrations exposing (..)
import Types exposing (RequestState(..))


frontendModel : Evergreen.V1.Types.FrontendModel -> ModelMigration Evergreen.V3.Types.FrontendModel Evergreen.V3.Types.FrontendMsg
frontendModel old =
    ModelMigrated ( migrate_Types_FrontendModel old, Cmd.none )


backendModel : Evergreen.V1.Types.BackendModel -> ModelMigration Evergreen.V3.Types.BackendModel Evergreen.V3.Types.BackendMsg
backendModel old =
    ModelUnchanged


frontendMsg : Evergreen.V1.Types.FrontendMsg -> MsgMigration Evergreen.V3.Types.FrontendMsg Evergreen.V3.Types.FrontendMsg
frontendMsg old =
    MsgMigrated ( migrate_Types_FrontendMsg old, Cmd.none )


toBackend : Evergreen.V1.Types.ToBackend -> MsgMigration Evergreen.V3.Types.ToBackend Evergreen.V3.Types.BackendMsg
toBackend old =
    MsgUnchanged


backendMsg : Evergreen.V1.Types.BackendMsg -> MsgMigration Evergreen.V3.Types.BackendMsg Evergreen.V3.Types.BackendMsg
backendMsg old =
    MsgMigrated ( migrate_Types_BackendMsg old, Cmd.none )


toFrontend : Evergreen.V1.Types.ToFrontend -> MsgMigration Evergreen.V3.Types.ToFrontend Evergreen.V3.Types.FrontendMsg
toFrontend old =
    MsgMigrated ( migrate_Types_ToFrontend old, Cmd.none )


migrate_Types_FrontendModel : Evergreen.V1.Types.FrontendModel -> Evergreen.V3.Types.FrontendModel
migrate_Types_FrontendModel old =
    { key = old.key
    , textInput = old.textInput
    , requestState = Evergreen.V3.Types.NotSubmitted
    }


migrate_Types_BackendMsg : Evergreen.V1.Types.BackendMsg -> Evergreen.V3.Types.BackendMsg
migrate_Types_BackendMsg old =
    case old of
        Evergreen.V1.Types.NoOpBackendMsg ->
            Evergreen.V3.Types.NoOpBackendMsg

        Evergreen.V1.Types.GptResponseReceived p0 p1 ->
            Evergreen.V3.Types.GptResponseReceived "" p0 p1


migrate_Types_FrontendMsg : Evergreen.V1.Types.FrontendMsg -> Evergreen.V3.Types.FrontendMsg
migrate_Types_FrontendMsg old =
    case old of
        Evergreen.V1.Types.UrlClicked p0 ->
            Evergreen.V3.Types.UrlClicked p0

        Evergreen.V1.Types.UrlChanged p0 ->
            Evergreen.V3.Types.UrlChanged p0

        Evergreen.V1.Types.NoOpFrontendMsg ->
            Evergreen.V3.Types.NoOpFrontendMsg

        Evergreen.V1.Types.TextInputChanged p0 ->
            Evergreen.V3.Types.TextInputChanged p0

        Evergreen.V1.Types.SubmitText p0 ->
            Evergreen.V3.Types.SubmitText p0

        Evergreen.V1.Types.ShowExplanation p0 p1 ->
            Evergreen.V3.Types.ShowExplanation <| Evergreen.V3.Types.BreakdownPart p0 p1 Nothing


migrate_Types_ToFrontend : Evergreen.V1.Types.ToFrontend -> Evergreen.V3.Types.ToFrontend
migrate_Types_ToFrontend old =
    case old of
        Evergreen.V1.Types.NoOpToFrontend ->
            Evergreen.V3.Types.NoOpToFrontend

        Evergreen.V1.Types.TranslationResult p0 ->
            let
                newTranslationModel : Evergreen.V1.Types.Translation -> Evergreen.V3.Types.Translation
                newTranslationModel oldT =
                    { breakdown =
                        oldT.inputAndExplanations
                            |> List.map
                                (always
                                    { estonian = ""
                                    , englishTranslation = ""
                                    , maybeExplanation = Nothing
                                    }
                                )
                    , translation = oldT.translation
                    }

                newGptError : Evergreen.V1.Types.GptAssistError -> Evergreen.V3.Types.GptAssistError
                newGptError oldE =
                    case oldE of
                        Evergreen.V1.Types.ApiProtocolError a ->
                            Evergreen.V3.Types.ApiProtocolError a

                        Evergreen.V1.Types.GptDecodeError a ->
                            Evergreen.V3.Types.GptDecodeError a

                        Evergreen.V1.Types.GptExpressedError a ->
                            Evergreen.V3.Types.GptExpressedError a
            in
            Evergreen.V3.Types.TranslationResult "" (p0 |> Result.map newTranslationModel |> Result.mapError newGptError)
