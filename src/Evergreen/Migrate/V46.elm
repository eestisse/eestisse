module Evergreen.Migrate.V46 exposing (..)

{-| This migration file was automatically generated by the lamdera compiler.

It includes:

  - A migration for each of the 6 Lamdera core types that has changed
  - A function named `migrate_ModuleName_TypeName` for each changed/custom type

Expect to see:

  - `Unimplement–µd` values as placeholders wherever I was unable to figure out a clear migration path for you
  - `@NOTICE` comments for things you should know about, i.e. new custom type constructors that won't get any
    value mappings from the old type by default

You can edit this file however you wish! It won't be generated again.

See <https://dashboard.lamdera.app/docs/evergreen> for more info.

-}

import Dict
import Evergreen.V45.Auth.Common
import Evergreen.V45.Background.Types
import Evergreen.V45.EmailAddress
import Evergreen.V45.OAuth
import Evergreen.V45.OAuth.AuthorizationCode
import Evergreen.V45.Point
import Evergreen.V45.Responsive
import Evergreen.V45.Route
import Evergreen.V45.Translation.Types
import Evergreen.V45.Types
import Evergreen.V46.Auth.Common
import Evergreen.V46.Background.Types
import Evergreen.V46.EmailAddress
import Evergreen.V46.OAuth
import Evergreen.V46.OAuth.AuthorizationCode
import Evergreen.V46.Point
import Evergreen.V46.Responsive
import Evergreen.V46.Route
import Evergreen.V46.Translation.Types
import Evergreen.V46.Types
import Lamdera.Migrations exposing (..)
import List
import Maybe


frontendModel : Evergreen.V45.Types.FrontendModel -> ModelMigration Evergreen.V46.Types.FrontendModel Evergreen.V46.Types.FrontendMsg
frontendModel old =
    ModelMigrated ( migrate_Types_FrontendModel old, Cmd.none )


backendModel : Evergreen.V45.Types.BackendModel -> ModelMigration Evergreen.V46.Types.BackendModel Evergreen.V46.Types.BackendMsg
backendModel old =
    ModelUnchanged


frontendMsg : Evergreen.V45.Types.FrontendMsg -> MsgMigration Evergreen.V46.Types.FrontendMsg Evergreen.V46.Types.FrontendMsg
frontendMsg old =
    MsgUnchanged


toBackend : Evergreen.V45.Types.ToBackend -> MsgMigration Evergreen.V46.Types.ToBackend Evergreen.V46.Types.BackendMsg
toBackend old =
    MsgUnchanged


backendMsg : Evergreen.V45.Types.BackendMsg -> MsgMigration Evergreen.V46.Types.BackendMsg Evergreen.V46.Types.BackendMsg
backendMsg old =
    MsgUnchanged


toFrontend : Evergreen.V45.Types.ToFrontend -> MsgMigration Evergreen.V46.Types.ToFrontend Evergreen.V46.Types.FrontendMsg
toFrontend old =
    MsgMigrated ( migrate_Types_ToFrontend old, Cmd.none )


migrate_Types_FrontendModel : Evergreen.V45.Types.FrontendModel -> Evergreen.V46.Types.FrontendModel
migrate_Types_FrontendModel old =
    { key = old.key
    , route = old.route |> migrate_Route_Route
    , time_bySecond = old.time_bySecond
    , authFlow = old.authFlow |> migrate_Auth_Common_Flow
    , authRedirectBaseUrl = old.authRedirectBaseUrl
    , maybeAuthedUserInfo = old.maybeAuthedUserInfo |> Maybe.map (Maybe.map migrate_Types_FrontendUserInfo)
    , signinModel = old.signinModel |> migrate_Types_SigninModel
    , dProfile = old.dProfile |> Maybe.map migrate_Responsive_DisplayProfile
    , maybeAdminData = old.maybeAdminData |> Maybe.map migrate_Types_AdminData
    , animationTime = old.animationTime
    , backgroundModel = old.backgroundModel |> Maybe.map migrate_Background_Types_Model
    , maybePublicCreditsInfo = old.maybePublicCreditsInfo
    , cachedTranslationRecords = old.cachedTranslationRecords |> Dict.map (\k -> migrate_Translation_Types_TranslationRecord)
    , doTranslateModel = old.doTranslateModel |> migrate_Types_DoTranslateModel
    , publicConsentChecked = old.publicConsentChecked
    , viewTranslationModel = old.viewTranslationModel |> migrate_Types_ViewTranslationModel
    , loadingAnimationCounter = old.loadingAnimationCounter
    , mobileMenuOpen = old.mobileMenuOpen
    , noMorePublicTranslationsToFetch = old.noMorePublicTranslationsToFetch
    , noMorePersonalTranslationsToFetch = old.noMorePersonalTranslationsToFetch
    , fetchingRecords = old.fetchingRecords
    , maybeConsentsFormModel = old.maybeConsentsFormModel
    , feedbackFormModel = old.feedbackFormModel |> migrate_Types_FeedbackFormModel
    }


migrate_Auth_Common_AuthChallengeReason : Evergreen.V45.Auth.Common.AuthChallengeReason -> Evergreen.V46.Auth.Common.AuthChallengeReason
migrate_Auth_Common_AuthChallengeReason old =
    case old of
        Evergreen.V45.Auth.Common.AuthSessionMissing ->
            Evergreen.V46.Auth.Common.AuthSessionMissing

        Evergreen.V45.Auth.Common.AuthSessionInvalid ->
            Evergreen.V46.Auth.Common.AuthSessionInvalid

        Evergreen.V45.Auth.Common.AuthSessionExpired ->
            Evergreen.V46.Auth.Common.AuthSessionExpired

        Evergreen.V45.Auth.Common.AuthSessionLoggedOut ->
            Evergreen.V46.Auth.Common.AuthSessionLoggedOut


migrate_Auth_Common_Error : Evergreen.V45.Auth.Common.Error -> Evergreen.V46.Auth.Common.Error
migrate_Auth_Common_Error old =
    case old of
        Evergreen.V45.Auth.Common.ErrStateMismatch ->
            Evergreen.V46.Auth.Common.ErrStateMismatch

        Evergreen.V45.Auth.Common.ErrAuthorization p0 ->
            Evergreen.V46.Auth.Common.ErrAuthorization (p0 |> migrate_OAuth_AuthorizationCode_AuthorizationError)

        Evergreen.V45.Auth.Common.ErrAuthentication p0 ->
            Evergreen.V46.Auth.Common.ErrAuthentication (p0 |> migrate_OAuth_AuthorizationCode_AuthenticationError)

        Evergreen.V45.Auth.Common.ErrHTTPGetAccessToken ->
            Evergreen.V46.Auth.Common.ErrHTTPGetAccessToken

        Evergreen.V45.Auth.Common.ErrHTTPGetUserInfo ->
            Evergreen.V46.Auth.Common.ErrHTTPGetUserInfo

        Evergreen.V45.Auth.Common.ErrAuthString p0 ->
            Evergreen.V46.Auth.Common.ErrAuthString p0


migrate_Auth_Common_Flow : Evergreen.V45.Auth.Common.Flow -> Evergreen.V46.Auth.Common.Flow
migrate_Auth_Common_Flow old =
    case old of
        Evergreen.V45.Auth.Common.Idle ->
            Evergreen.V46.Auth.Common.Idle

        Evergreen.V45.Auth.Common.Requested p0 ->
            Evergreen.V46.Auth.Common.Requested p0

        Evergreen.V45.Auth.Common.Pending ->
            Evergreen.V46.Auth.Common.Pending

        Evergreen.V45.Auth.Common.Authorized p0 p1 ->
            Evergreen.V46.Auth.Common.Authorized p0 p1

        Evergreen.V45.Auth.Common.Authenticated p0 ->
            Evergreen.V46.Auth.Common.Authenticated (p0 |> migrate_OAuth_Token)

        Evergreen.V45.Auth.Common.Done p0 ->
            Evergreen.V46.Auth.Common.Done (p0 |> migrate_Auth_Common_UserInfo)

        Evergreen.V45.Auth.Common.Errored p0 ->
            Evergreen.V46.Auth.Common.Errored (p0 |> migrate_Auth_Common_Error)


migrate_Auth_Common_ToFrontend : Evergreen.V45.Auth.Common.ToFrontend -> Evergreen.V46.Auth.Common.ToFrontend
migrate_Auth_Common_ToFrontend old =
    case old of
        Evergreen.V45.Auth.Common.AuthInitiateSignin p0 ->
            Evergreen.V46.Auth.Common.AuthInitiateSignin p0

        Evergreen.V45.Auth.Common.AuthError p0 ->
            Evergreen.V46.Auth.Common.AuthError (p0 |> migrate_Auth_Common_Error)

        Evergreen.V45.Auth.Common.AuthSessionChallenge p0 ->
            Evergreen.V46.Auth.Common.AuthSessionChallenge (p0 |> migrate_Auth_Common_AuthChallengeReason)


migrate_Auth_Common_UserInfo : Evergreen.V45.Auth.Common.UserInfo -> Evergreen.V46.Auth.Common.UserInfo
migrate_Auth_Common_UserInfo old =
    old


migrate_Background_Types_Model : Evergreen.V45.Background.Types.Model -> Evergreen.V46.Background.Types.Model
migrate_Background_Types_Model old =
    { seed = old.seed
    , animationTime = old.animationTime
    , pathsAcross = old.pathsAcross |> List.map (Tuple.mapBoth migrate_Background_Types_PathAcross (Maybe.map migrate_Background_Types_PathAcrossAnimationState))
    }


migrate_Background_Types_PathAcross : Evergreen.V45.Background.Types.PathAcross -> Evergreen.V46.Background.Types.PathAcross
migrate_Background_Types_PathAcross old =
    { yPathStart = old.yPathStart
    , sections = old.sections |> List.map migrate_Background_Types_PathSection
    , color =
        old.color
            |> (\rec -> rec)
    }


migrate_Background_Types_PathAcrossAnimationState : Evergreen.V45.Background.Types.PathAcrossAnimationState -> Evergreen.V46.Background.Types.PathAcrossAnimationState
migrate_Background_Types_PathAcrossAnimationState old =
    { pathAcrossTarget = old.pathAcrossTarget |> migrate_Background_Types_PathAcross
    , animationStart = old.animationStart
    }


migrate_Background_Types_PathPiece : Evergreen.V45.Background.Types.PathPiece -> Evergreen.V46.Background.Types.PathPiece
migrate_Background_Types_PathPiece old =
    case old of
        Evergreen.V45.Background.Types.ElbowLeftToUp ->
            Evergreen.V46.Background.Types.ElbowLeftToUp

        Evergreen.V45.Background.Types.ElbowLeftToDown ->
            Evergreen.V46.Background.Types.ElbowLeftToDown

        Evergreen.V45.Background.Types.ElbowUpToRight ->
            Evergreen.V46.Background.Types.ElbowUpToRight

        Evergreen.V45.Background.Types.ElbowDownToRight ->
            Evergreen.V46.Background.Types.ElbowDownToRight

        Evergreen.V45.Background.Types.Right p0 ->
            Evergreen.V46.Background.Types.Right p0

        Evergreen.V45.Background.Types.Up p0 ->
            Evergreen.V46.Background.Types.Up p0

        Evergreen.V45.Background.Types.Down p0 ->
            Evergreen.V46.Background.Types.Down p0


migrate_Background_Types_PathSection : Evergreen.V45.Background.Types.PathSection -> Evergreen.V46.Background.Types.PathSection
migrate_Background_Types_PathSection old =
    { piece = old.piece |> migrate_Background_Types_PathPiece
    , endPointRelative = old.endPointRelative |> migrate_Point_Point
    , startPointRelative = old.startPointRelative |> migrate_Point_Point
    }


migrate_EmailAddress_EmailAddress : Evergreen.V45.EmailAddress.EmailAddress -> Evergreen.V46.EmailAddress.EmailAddress
migrate_EmailAddress_EmailAddress old =
    old


migrate_OAuth_AuthorizationCode_AuthenticationError : Evergreen.V45.OAuth.AuthorizationCode.AuthenticationError -> Evergreen.V46.OAuth.AuthorizationCode.AuthenticationError
migrate_OAuth_AuthorizationCode_AuthenticationError old =
    { error = old.error |> migrate_OAuth_ErrorCode
    , errorDescription = old.errorDescription
    , errorUri = old.errorUri
    }


migrate_OAuth_AuthorizationCode_AuthorizationError : Evergreen.V45.OAuth.AuthorizationCode.AuthorizationError -> Evergreen.V46.OAuth.AuthorizationCode.AuthorizationError
migrate_OAuth_AuthorizationCode_AuthorizationError old =
    { error = old.error |> migrate_OAuth_ErrorCode
    , errorDescription = old.errorDescription
    , errorUri = old.errorUri
    , state = old.state
    }


migrate_OAuth_ErrorCode : Evergreen.V45.OAuth.ErrorCode -> Evergreen.V46.OAuth.ErrorCode
migrate_OAuth_ErrorCode old =
    case old of
        Evergreen.V45.OAuth.InvalidRequest ->
            Evergreen.V46.OAuth.InvalidRequest

        Evergreen.V45.OAuth.UnauthorizedClient ->
            Evergreen.V46.OAuth.UnauthorizedClient

        Evergreen.V45.OAuth.AccessDenied ->
            Evergreen.V46.OAuth.AccessDenied

        Evergreen.V45.OAuth.UnsupportedResponseType ->
            Evergreen.V46.OAuth.UnsupportedResponseType

        Evergreen.V45.OAuth.InvalidScope ->
            Evergreen.V46.OAuth.InvalidScope

        Evergreen.V45.OAuth.ServerError ->
            Evergreen.V46.OAuth.ServerError

        Evergreen.V45.OAuth.TemporarilyUnavailable ->
            Evergreen.V46.OAuth.TemporarilyUnavailable

        Evergreen.V45.OAuth.Custom p0 ->
            Evergreen.V46.OAuth.Custom p0


migrate_OAuth_Token : Evergreen.V45.OAuth.Token -> Evergreen.V46.OAuth.Token
migrate_OAuth_Token old =
    case old of
        Evergreen.V45.OAuth.Bearer p0 ->
            Evergreen.V46.OAuth.Bearer p0


migrate_Point_Point : Evergreen.V45.Point.Point -> Evergreen.V46.Point.Point
migrate_Point_Point old =
    old


migrate_Responsive_DisplayProfile : Evergreen.V45.Responsive.DisplayProfile -> Evergreen.V46.Responsive.DisplayProfile
migrate_Responsive_DisplayProfile old =
    case old of
        Evergreen.V45.Responsive.Desktop ->
            Evergreen.V46.Responsive.Desktop

        Evergreen.V45.Responsive.Mobile ->
            Evergreen.V46.Responsive.Mobile


migrate_Route_Route : Evergreen.V45.Route.Route -> Evergreen.V46.Route.Route
migrate_Route_Route old =
    case old of
        Evergreen.V45.Route.Landing ->
            Evergreen.V46.Route.Landing

        Evergreen.V45.Route.Translate ->
            Evergreen.V46.Route.Translate

        Evergreen.V45.Route.Admin ->
            Evergreen.V46.Route.Admin

        Evergreen.V45.Route.AuthCallback p0 ->
            Evergreen.V46.Route.AuthCallback p0

        Evergreen.V45.Route.Account ->
            Evergreen.V46.Route.Account

        Evergreen.V45.Route.StripeLinkback ->
            Evergreen.V46.Route.StripeLinkback

        Evergreen.V45.Route.Browse ->
            Evergreen.V46.Route.Browse

        Evergreen.V45.Route.History ->
            Evergreen.V46.Route.History

        Evergreen.V45.Route.View p0 ->
            Evergreen.V46.Route.View p0

        Evergreen.V45.Route.Feedback ->
            Evergreen.V46.Route.Feedback

        Evergreen.V45.Route.BadRoute p0 ->
            Evergreen.V46.Route.BadRoute p0


migrate_Translation_Types_EnglishOrEstonian : Evergreen.V45.Translation.Types.EnglishOrEstonian -> Evergreen.V46.Translation.Types.EnglishOrEstonian
migrate_Translation_Types_EnglishOrEstonian old =
    case old of
        Evergreen.V45.Translation.Types.English ->
            Evergreen.V46.Translation.Types.English

        Evergreen.V45.Translation.Types.Estonian ->
            Evergreen.V46.Translation.Types.Estonian


migrate_Translation_Types_GptAssistError : Evergreen.V45.Translation.Types.GptAssistError -> Evergreen.V46.Translation.Types.GptAssistError
migrate_Translation_Types_GptAssistError old =
    case old of
        Evergreen.V45.Translation.Types.OutOfCredits ->
            Evergreen.V46.Translation.Types.OutOfCredits

        Evergreen.V45.Translation.Types.TooLong p0 ->
            Evergreen.V46.Translation.Types.TooLong p0

        Evergreen.V45.Translation.Types.ApiProtocolError p0 ->
            Evergreen.V46.Translation.Types.ApiProtocolError (p0 |> migrate_Translation_Types_ProtocolError)

        Evergreen.V45.Translation.Types.GptDecodeError p0 ->
            Evergreen.V46.Translation.Types.GptDecodeError p0

        Evergreen.V45.Translation.Types.GptExpressedError p0 ->
            Evergreen.V46.Translation.Types.GptExpressedError p0


migrate_Translation_Types_ProtocolError : Evergreen.V45.Translation.Types.ProtocolError -> Evergreen.V46.Translation.Types.ProtocolError
migrate_Translation_Types_ProtocolError old =
    case old of
        Evergreen.V45.Translation.Types.RateLimited ->
            Evergreen.V46.Translation.Types.RateLimited

        Evergreen.V45.Translation.Types.HttpError p0 ->
            Evergreen.V46.Translation.Types.HttpError p0


migrate_Translation_Types_PublicOrPersonal : Evergreen.V45.Translation.Types.PublicOrPersonal -> Evergreen.V46.Translation.Types.PublicOrPersonal
migrate_Translation_Types_PublicOrPersonal old =
    case old of
        Evergreen.V45.Translation.Types.Public ->
            Evergreen.V46.Translation.Types.Public

        Evergreen.V45.Translation.Types.Personal ->
            Evergreen.V46.Translation.Types.Personal


migrate_Translation_Types_Translation : Evergreen.V45.Translation.Types.Translation -> Evergreen.V46.Translation.Types.Translation
migrate_Translation_Types_Translation old =
    { translatedTo = old.translatedTo |> migrate_Translation_Types_EnglishOrEstonian
    , translatedText = old.translatedText
    , breakdown = old.breakdown
    }


migrate_Translation_Types_TranslationRecord : Evergreen.V45.Translation.Types.TranslationRecord -> Evergreen.V46.Translation.Types.TranslationRecord
migrate_Translation_Types_TranslationRecord old =
    { id = old.id
    , fromUserId = old.fromUserId
    , public = old.public
    , time = old.time
    , input = old.input
    , translation = old.translation |> migrate_Translation_Types_Translation
    }


migrate_Types_AdminData : Evergreen.V45.Types.AdminData -> Evergreen.V46.Types.AdminData
migrate_Types_AdminData old =
    { users = Dict.empty
    , adminMessages = old.adminMessages
    }


migrate_Types_DoTranslateModel : Evergreen.V45.Types.DoTranslateModel -> Evergreen.V46.Types.DoTranslateModel
migrate_Types_DoTranslateModel old =
    { input = old.input
    , state = old.state |> migrate_Types_DoTranslateState
    }


migrate_Types_DoTranslateState : Evergreen.V45.Types.DoTranslateState -> Evergreen.V46.Types.DoTranslateState
migrate_Types_DoTranslateState old =
    case old of
        Evergreen.V45.Types.Inputting ->
            Evergreen.V46.Types.Inputting

        Evergreen.V45.Types.TranslateRequestSubmitted ->
            Evergreen.V46.Types.TranslateRequestSubmitted

        Evergreen.V45.Types.Error p0 ->
            Evergreen.V46.Types.Error (p0 |> migrate_Translation_Types_GptAssistError)


migrate_Types_EmailFormState : Evergreen.V45.Types.EmailFormState -> Evergreen.V46.Types.EmailFormState
migrate_Types_EmailFormState old =
    case old of
        Evergreen.V45.Types.Inactive ->
            Evergreen.V46.Types.Inactive

        Evergreen.V45.Types.InputtingEmail p0 ->
            Evergreen.V46.Types.InputtingEmail p0

        Evergreen.V45.Types.InputtingCode p0 ->
            Evergreen.V46.Types.InputtingCode (p0 |> migrate_Types_InputtingCodeModel)

        Evergreen.V45.Types.CodeSubmitted p0 ->
            Evergreen.V46.Types.CodeSubmitted (p0 |> migrate_EmailAddress_EmailAddress)


migrate_Types_FeedbackFormModel : Evergreen.V45.Types.FeedbackFormModel -> Evergreen.V46.Types.FeedbackFormModel
migrate_Types_FeedbackFormModel old =
    { textInput = old.textInput
    , emailInput = old.emailInput
    , submitStatus = old.submitStatus |> migrate_Types_SubmitStatus
    }


migrate_Types_FrontendUserInfo : Evergreen.V45.Types.FrontendUserInfo -> Evergreen.V46.Types.FrontendUserInfo
migrate_Types_FrontendUserInfo old =
    { id = old.id
    , email = old.email
    , membershipStatus = old.membershipStatus |> migrate_Types_MembershipStatus
    , consentsSubmitted = old.consentsSubmitted
    , publicConsentChecked = old.publicConsentChecked
    }


migrate_Types_GeneralData : Evergreen.V45.Types.GeneralData -> Evergreen.V46.Types.GeneralData
migrate_Types_GeneralData old =
    { publicCreditsInfo = old.publicCreditsInfo |> migrate_Types_PublicCreditsInfo
    }


migrate_Types_InputtingCodeModel : Evergreen.V45.Types.InputtingCodeModel -> Evergreen.V46.Types.InputtingCodeModel
migrate_Types_InputtingCodeModel old =
    { emailAddress = old.emailAddress |> migrate_EmailAddress_EmailAddress
    , input = old.input
    , maybeError = old.maybeError |> Maybe.map migrate_Types_LoginCodeErr
    }


migrate_Types_LoginCodeErr : Evergreen.V45.Types.LoginCodeErr -> Evergreen.V46.Types.LoginCodeErr
migrate_Types_LoginCodeErr old =
    case old of
        Evergreen.V45.Types.IncorrectCode ->
            Evergreen.V46.Types.IncorrectCode

        Evergreen.V45.Types.CodeExpired ->
            Evergreen.V46.Types.CodeExpired


migrate_Types_MembershipStatus : Evergreen.V45.Types.MembershipStatus -> Evergreen.V46.Types.MembershipStatus
migrate_Types_MembershipStatus old =
    case old of
        Evergreen.V45.Types.NoStripeInfo ->
            Evergreen.V46.Types.NoStripeInfo

        Evergreen.V45.Types.NotStarted ->
            Evergreen.V46.Types.NotStarted

        Evergreen.V45.Types.MembershipActive ->
            Evergreen.V46.Types.MembershipActive

        Evergreen.V45.Types.MembershipAlmostExpired ->
            Evergreen.V46.Types.MembershipAlmostExpired

        Evergreen.V45.Types.MembershipExpired ->
            Evergreen.V46.Types.MembershipExpired


migrate_Types_PublicCreditsInfo : Evergreen.V45.Types.PublicCreditsInfo -> Evergreen.V46.Types.PublicCreditsInfo
migrate_Types_PublicCreditsInfo old =
    old


migrate_Types_SigninModel : Evergreen.V45.Types.SigninModel -> Evergreen.V46.Types.SigninModel
migrate_Types_SigninModel old =
    { emailFormMode = old.emailFormMode |> migrate_Types_EmailFormState
    }


migrate_Types_SubmitStatus : Evergreen.V45.Types.SubmitStatus -> Evergreen.V46.Types.SubmitStatus
migrate_Types_SubmitStatus old =
    case old of
        Evergreen.V45.Types.NotSubmitted ->
            Evergreen.V46.Types.NotSubmitted

        Evergreen.V45.Types.SubmitWaiting ->
            Evergreen.V46.Types.SubmitWaiting

        Evergreen.V45.Types.Complete ->
            Evergreen.V46.Types.Complete


migrate_Types_ToFrontend : Evergreen.V45.Types.ToFrontend -> Evergreen.V46.Types.ToFrontend
migrate_Types_ToFrontend old =
    case old of
        Evergreen.V45.Types.TF_NoOp ->
            Evergreen.V46.Types.TF_NoOp

        Evergreen.V45.Types.TF_AuthMsg p0 ->
            Evergreen.V46.Types.TF_AuthMsg (p0 |> migrate_Auth_Common_ToFrontend)

        Evergreen.V45.Types.TF_AuthSuccess p0 ->
            Evergreen.V46.Types.TF_AuthSuccess (p0 |> migrate_Types_FrontendUserInfo)

        Evergreen.V45.Types.TF_UserInfo p0 ->
            Evergreen.V46.Types.TF_UserInfo (p0 |> Maybe.map migrate_Types_FrontendUserInfo)

        Evergreen.V45.Types.TF_TranslationResult p0 p1 ->
            Evergreen.V46.Types.TF_TranslationResult p0
                (p1 |> Result.mapError migrate_Translation_Types_GptAssistError >> Result.map migrate_Translation_Types_TranslationRecord)

        Evergreen.V45.Types.TF_AdminData p0 ->
            Evergreen.V46.Types.TF_AdminData (p0 |> migrate_Types_AdminData)

        Evergreen.V45.Types.TF_GeneralData p0 ->
            Evergreen.V46.Types.TF_GeneralData (p0 |> migrate_Types_GeneralData)

        Evergreen.V45.Types.TF_CreditsInfo p0 ->
            Evergreen.V46.Types.TF_CreditsInfo (p0 |> migrate_Types_PublicCreditsInfo)

        Evergreen.V45.Types.TF_TranslationRecordsRequestResult p0 ->
            Evergreen.V46.Types.TF_TranslationRecordsRequestResult (p0 |> Result.mapError migrate_Types_TranslationRecordFetchError >> Result.map (List.map migrate_Translation_Types_TranslationRecord))

        Evergreen.V45.Types.TF_NoMoreTranslationsToFetch p0 ->
            Evergreen.V46.Types.TF_NoMoreTranslationsToFetch (p0 |> migrate_Translation_Types_PublicOrPersonal)

        Evergreen.V45.Types.TF_RedirectReturnPage p0 ->
            Evergreen.V46.Types.TF_RedirectReturnPage (p0 |> Maybe.map migrate_Route_Route)

        Evergreen.V45.Types.TF_LoginCodeError p0 ->
            Evergreen.V46.Types.TF_LoginCodeError (p0 |> migrate_Types_LoginCodeErr)

        Evergreen.V45.Types.TF_AckUserFeedback ->
            Evergreen.V46.Types.TF_AckUserFeedback


migrate_Types_TranslationRecordFetchError : Evergreen.V45.Types.TranslationRecordFetchError -> Evergreen.V46.Types.TranslationRecordFetchError
migrate_Types_TranslationRecordFetchError old =
    case old of
        Evergreen.V45.Types.InvalidTranslationRecordId ->
            Evergreen.V46.Types.InvalidTranslationRecordId

        Evergreen.V45.Types.IncorrectPermissionForTranslationRecord ->
            Evergreen.V46.Types.IncorrectPermissionForTranslationRecord


migrate_Types_ViewTranslationModel : Evergreen.V45.Types.ViewTranslationModel -> Evergreen.V46.Types.ViewTranslationModel
migrate_Types_ViewTranslationModel old =
    old
